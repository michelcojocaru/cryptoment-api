paths:
  /icowatchlist_live_models:
    post:
      tags:
        - icowatchlist_live_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: icowatchlist_live_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
    put:
      tags:
        - icowatchlist_live_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_live_model.upsert__put_icowatchlist_live_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
    patch:
      tags:
        - icowatchlist_live_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_live_model.upsert__patch_icowatchlist_live_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
    get:
      tags:
        - icowatchlist_live_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: icowatchlist_live_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
  /icowatchlist_live_models/replaceOrCreate:
    post:
      tags:
        - icowatchlist_live_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_live_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
  /icowatchlist_live_models/upsertWithWhere:
    post:
      tags:
        - icowatchlist_live_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: icowatchlist_live_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
  '/icowatchlist_live_models/{id}/exists':
    get:
      tags:
        - icowatchlist_live_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'icowatchlist_live_model.exists__get_icowatchlist_live_models_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/icowatchlist_live_models/{id}':
    head:
      tags:
        - icowatchlist_live_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'icowatchlist_live_model.exists__head_icowatchlist_live_models_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - icowatchlist_live_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: icowatchlist_live_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
    delete:
      tags:
        - icowatchlist_live_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: icowatchlist_live_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - icowatchlist_live_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        icowatchlist_live_model.prototype.updateAttributes__put_icowatchlist_live_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_live_model'
        - name: id
          in: path
          description: icowatchlist_live_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
    patch:
      tags:
        - icowatchlist_live_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        icowatchlist_live_model.prototype.updateAttributes__patch_icowatchlist_live_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_live_model'
        - name: id
          in: path
          description: icowatchlist_live_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
  '/icowatchlist_live_models/{id}/replace':
    post:
      tags:
        - icowatchlist_live_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: icowatchlist_live_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
  /icowatchlist_live_models/findOne:
    get:
      tags:
        - icowatchlist_live_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: icowatchlist_live_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_live_model'
      deprecated: false
  /icowatchlist_live_models/update:
    post:
      tags:
        - icowatchlist_live_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: icowatchlist_live_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_live_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /icowatchlist_live_models/count:
    get:
      tags:
        - icowatchlist_live_model
      summary: Count instances of the model matched by where from the data source.
      operationId: icowatchlist_live_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /icowatchlist_upcoming_models:
    post:
      tags:
        - icowatchlist_upcoming_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: icowatchlist_upcoming_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
    put:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_upcoming_model.upsert__put_icowatchlist_upcoming_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
    patch:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_upcoming_model.upsert__patch_icowatchlist_upcoming_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
    get:
      tags:
        - icowatchlist_upcoming_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: icowatchlist_upcoming_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
  /icowatchlist_upcoming_models/replaceOrCreate:
    post:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_upcoming_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
  /icowatchlist_upcoming_models/upsertWithWhere:
    post:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: icowatchlist_upcoming_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
  '/icowatchlist_upcoming_models/{id}/exists':
    get:
      tags:
        - icowatchlist_upcoming_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        icowatchlist_upcoming_model.exists__get_icowatchlist_upcoming_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/icowatchlist_upcoming_models/{id}':
    head:
      tags:
        - icowatchlist_upcoming_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        icowatchlist_upcoming_model.exists__head_icowatchlist_upcoming_models_{id}
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - icowatchlist_upcoming_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: icowatchlist_upcoming_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
    delete:
      tags:
        - icowatchlist_upcoming_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: icowatchlist_upcoming_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        icowatchlist_upcoming_model.prototype.updateAttributes__put_icowatchlist_upcoming_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_upcoming_model'
        - name: id
          in: path
          description: icowatchlist_upcoming_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
    patch:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        icowatchlist_upcoming_model.prototype.updateAttributes__patch_icowatchlist_upcoming_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_upcoming_model'
        - name: id
          in: path
          description: icowatchlist_upcoming_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
  '/icowatchlist_upcoming_models/{id}/replace':
    post:
      tags:
        - icowatchlist_upcoming_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: icowatchlist_upcoming_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
  /icowatchlist_upcoming_models/findOne:
    get:
      tags:
        - icowatchlist_upcoming_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: icowatchlist_upcoming_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_upcoming_model'
      deprecated: false
  /icowatchlist_upcoming_models/update:
    post:
      tags:
        - icowatchlist_upcoming_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: icowatchlist_upcoming_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_upcoming_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /icowatchlist_upcoming_models/count:
    get:
      tags:
        - icowatchlist_upcoming_model
      summary: Count instances of the model matched by where from the data source.
      operationId: icowatchlist_upcoming_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /icowatchlist_finished_models:
    post:
      tags:
        - icowatchlist_finished_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: icowatchlist_finished_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
    put:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_finished_model.upsert__put_icowatchlist_finished_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
    patch:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_finished_model.upsert__patch_icowatchlist_finished_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
    get:
      tags:
        - icowatchlist_finished_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: icowatchlist_finished_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
  /icowatchlist_finished_models/replaceOrCreate:
    post:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: icowatchlist_finished_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
  /icowatchlist_finished_models/upsertWithWhere:
    post:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: icowatchlist_finished_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
  '/icowatchlist_finished_models/{id}/exists':
    get:
      tags:
        - icowatchlist_finished_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        icowatchlist_finished_model.exists__get_icowatchlist_finished_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/icowatchlist_finished_models/{id}':
    head:
      tags:
        - icowatchlist_finished_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        icowatchlist_finished_model.exists__head_icowatchlist_finished_models_{id}
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - icowatchlist_finished_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: icowatchlist_finished_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
    delete:
      tags:
        - icowatchlist_finished_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: icowatchlist_finished_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        icowatchlist_finished_model.prototype.updateAttributes__put_icowatchlist_finished_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_finished_model'
        - name: id
          in: path
          description: icowatchlist_finished_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
    patch:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        icowatchlist_finished_model.prototype.updateAttributes__patch_icowatchlist_finished_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_finished_model'
        - name: id
          in: path
          description: icowatchlist_finished_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
  '/icowatchlist_finished_models/{id}/replace':
    post:
      tags:
        - icowatchlist_finished_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: icowatchlist_finished_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
  /icowatchlist_finished_models/findOne:
    get:
      tags:
        - icowatchlist_finished_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: icowatchlist_finished_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/icowatchlist_finished_model'
      deprecated: false
  /icowatchlist_finished_models/update:
    post:
      tags:
        - icowatchlist_finished_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: icowatchlist_finished_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/icowatchlist_finished_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /icowatchlist_finished_models/count:
    get:
      tags:
        - icowatchlist_finished_model
      summary: Count instances of the model matched by where from the data source.
      operationId: icowatchlist_finished_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/coinmarketcap_coin_models/{id}/markets':
    get:
      tags:
        - coinmarketcap_coin_model
      summary: Fetches hasOne relation markets.
      operationId: coinmarketcap_coin_model.prototype.__get__markets
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: coinmarketcap_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    post:
      tags:
        - coinmarketcap_coin_model
      summary: Creates a new instance in markets of this model.
      operationId: coinmarketcap_coin_model.prototype.__create__markets
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
        - name: id
          in: path
          description: coinmarketcap_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    put:
      tags:
        - coinmarketcap_coin_model
      summary: Update markets of this model.
      operationId: coinmarketcap_coin_model.prototype.__update__markets
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
        - name: id
          in: path
          description: coinmarketcap_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    delete:
      tags:
        - coinmarketcap_coin_model
      summary: Deletes markets of this model.
      operationId: coinmarketcap_coin_model.prototype.__destroy__markets
      parameters:
        - name: id
          in: path
          description: coinmarketcap_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /coinmarketcap_coin_models:
    post:
      tags:
        - coinmarketcap_coin_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: coinmarketcap_coin_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
    put:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coinmarketcap_coin_model.upsert__put_coinmarketcap_coin_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
    patch:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coinmarketcap_coin_model.upsert__patch_coinmarketcap_coin_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
    get:
      tags:
        - coinmarketcap_coin_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: coinmarketcap_coin_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
  /coinmarketcap_coin_models/replaceOrCreate:
    post:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: coinmarketcap_coin_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
  /coinmarketcap_coin_models/upsertWithWhere:
    post:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: coinmarketcap_coin_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
  '/coinmarketcap_coin_models/{id}/exists':
    get:
      tags:
        - coinmarketcap_coin_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coinmarketcap_coin_model.exists__get_coinmarketcap_coin_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/coinmarketcap_coin_models/{id}':
    head:
      tags:
        - coinmarketcap_coin_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'coinmarketcap_coin_model.exists__head_coinmarketcap_coin_models_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - coinmarketcap_coin_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: coinmarketcap_coin_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
    delete:
      tags:
        - coinmarketcap_coin_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: coinmarketcap_coin_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coinmarketcap_coin_model.prototype.updateAttributes__put_coinmarketcap_coin_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_coin_model'
        - name: id
          in: path
          description: coinmarketcap_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
    patch:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coinmarketcap_coin_model.prototype.updateAttributes__patch_coinmarketcap_coin_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_coin_model'
        - name: id
          in: path
          description: coinmarketcap_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
  '/coinmarketcap_coin_models/{id}/replace':
    post:
      tags:
        - coinmarketcap_coin_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: coinmarketcap_coin_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
  /coinmarketcap_coin_models/findOne:
    get:
      tags:
        - coinmarketcap_coin_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: coinmarketcap_coin_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_coin_model'
      deprecated: false
  /coinmarketcap_coin_models/update:
    post:
      tags:
        - coinmarketcap_coin_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: coinmarketcap_coin_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /coinmarketcap_coin_models/count:
    get:
      tags:
        - coinmarketcap_coin_model
      summary: Count instances of the model matched by where from the data source.
      operationId: coinmarketcap_coin_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /coinmarketcap_markets_models:
    post:
      tags:
        - coinmarketcap_markets_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: coinmarketcap_markets_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    put:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coinmarketcap_markets_model.upsert__put_coinmarketcap_markets_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    patch:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coinmarketcap_markets_model.upsert__patch_coinmarketcap_markets_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    get:
      tags:
        - coinmarketcap_markets_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: coinmarketcap_markets_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
  /coinmarketcap_markets_models/replaceOrCreate:
    post:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: coinmarketcap_markets_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
  /coinmarketcap_markets_models/upsertWithWhere:
    post:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: coinmarketcap_markets_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
  '/coinmarketcap_markets_models/{id}/exists':
    get:
      tags:
        - coinmarketcap_markets_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coinmarketcap_markets_model.exists__get_coinmarketcap_markets_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/coinmarketcap_markets_models/{id}':
    head:
      tags:
        - coinmarketcap_markets_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coinmarketcap_markets_model.exists__head_coinmarketcap_markets_models_{id}
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - coinmarketcap_markets_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: coinmarketcap_markets_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    delete:
      tags:
        - coinmarketcap_markets_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: coinmarketcap_markets_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coinmarketcap_markets_model.prototype.updateAttributes__put_coinmarketcap_markets_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_markets_model'
        - name: id
          in: path
          description: coinmarketcap_markets_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
    patch:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coinmarketcap_markets_model.prototype.updateAttributes__patch_coinmarketcap_markets_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_markets_model'
        - name: id
          in: path
          description: coinmarketcap_markets_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
  '/coinmarketcap_markets_models/{id}/replace':
    post:
      tags:
        - coinmarketcap_markets_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: coinmarketcap_markets_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
  /coinmarketcap_markets_models/findOne:
    get:
      tags:
        - coinmarketcap_markets_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: coinmarketcap_markets_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coinmarketcap_markets_model'
      deprecated: false
  /coinmarketcap_markets_models/update:
    post:
      tags:
        - coinmarketcap_markets_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: coinmarketcap_markets_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coinmarketcap_markets_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /coinmarketcap_markets_models/count:
    get:
      tags:
        - coinmarketcap_markets_model
      summary: Count instances of the model matched by where from the data source.
      operationId: coinmarketcap_markets_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /masternodespro_statistics_models:
    post:
      tags:
        - masternodespro_statistics_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: masternodespro_statistics_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
    put:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: >-
        masternodespro_statistics_model.upsert__put_masternodespro_statistics_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
    patch:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: >-
        masternodespro_statistics_model.upsert__patch_masternodespro_statistics_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
    get:
      tags:
        - masternodespro_statistics_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: masternodespro_statistics_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
  /masternodespro_statistics_models/replaceOrCreate:
    post:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: masternodespro_statistics_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
  /masternodespro_statistics_models/upsertWithWhere:
    post:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: masternodespro_statistics_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
  '/masternodespro_statistics_models/{id}/exists':
    get:
      tags:
        - masternodespro_statistics_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        masternodespro_statistics_model.exists__get_masternodespro_statistics_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/masternodespro_statistics_models/{id}':
    head:
      tags:
        - masternodespro_statistics_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        masternodespro_statistics_model.exists__head_masternodespro_statistics_models_{id}
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - masternodespro_statistics_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: masternodespro_statistics_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
    delete:
      tags:
        - masternodespro_statistics_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: masternodespro_statistics_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        masternodespro_statistics_model.prototype.updateAttributes__put_masternodespro_statistics_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/masternodespro_statistics_model'
        - name: id
          in: path
          description: masternodespro_statistics_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
    patch:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        masternodespro_statistics_model.prototype.updateAttributes__patch_masternodespro_statistics_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/masternodespro_statistics_model'
        - name: id
          in: path
          description: masternodespro_statistics_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
  '/masternodespro_statistics_models/{id}/replace':
    post:
      tags:
        - masternodespro_statistics_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: masternodespro_statistics_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
  /masternodespro_statistics_models/findOne:
    get:
      tags:
        - masternodespro_statistics_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: masternodespro_statistics_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/masternodespro_statistics_model'
      deprecated: false
  /masternodespro_statistics_models/update:
    post:
      tags:
        - masternodespro_statistics_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: masternodespro_statistics_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/masternodespro_statistics_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /masternodespro_statistics_models/count:
    get:
      tags:
        - masternodespro_statistics_model
      summary: Count instances of the model matched by where from the data source.
      operationId: masternodespro_statistics_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /coincheckup_investment_models:
    post:
      tags:
        - coincheckup_investment_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: coincheckup_investment_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    put:
      tags:
        - coincheckup_investment_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_investment_model.upsert__put_coincheckup_investment_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_investment_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_investment_model.upsert__patch_coincheckup_investment_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    get:
      tags:
        - coincheckup_investment_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: coincheckup_investment_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
  /coincheckup_investment_models/replaceOrCreate:
    post:
      tags:
        - coincheckup_investment_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_investment_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
  /coincheckup_investment_models/upsertWithWhere:
    post:
      tags:
        - coincheckup_investment_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: coincheckup_investment_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
  '/coincheckup_investment_models/{id}/exists':
    get:
      tags:
        - coincheckup_investment_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coincheckup_investment_model.exists__get_coincheckup_investment_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/coincheckup_investment_models/{id}':
    head:
      tags:
        - coincheckup_investment_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coincheckup_investment_model.exists__head_coincheckup_investment_models_{id}
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - coincheckup_investment_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: coincheckup_investment_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    delete:
      tags:
        - coincheckup_investment_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: coincheckup_investment_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - coincheckup_investment_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_investment_model.prototype.updateAttributes__put_coincheckup_investment_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_investment_model'
        - name: id
          in: path
          description: coincheckup_investment_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_investment_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_investment_model.prototype.updateAttributes__patch_coincheckup_investment_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_investment_model'
        - name: id
          in: path
          description: coincheckup_investment_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
  '/coincheckup_investment_models/{id}/replace':
    post:
      tags:
        - coincheckup_investment_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: coincheckup_investment_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
  /coincheckup_investment_models/findOne:
    get:
      tags:
        - coincheckup_investment_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: coincheckup_investment_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
  /coincheckup_investment_models/update:
    post:
      tags:
        - coincheckup_investment_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: coincheckup_investment_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_investment_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /coincheckup_investment_models/count:
    get:
      tags:
        - coincheckup_investment_model
      summary: Count instances of the model matched by where from the data source.
      operationId: coincheckup_investment_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /coincheckup_score_models:
    post:
      tags:
        - coincheckup_score_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: coincheckup_score_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
    put:
      tags:
        - coincheckup_score_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_score_model.upsert__put_coincheckup_score_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_score_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_score_model.upsert__patch_coincheckup_score_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
    get:
      tags:
        - coincheckup_score_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: coincheckup_score_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
  /coincheckup_score_models/replaceOrCreate:
    post:
      tags:
        - coincheckup_score_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_score_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
  /coincheckup_score_models/upsertWithWhere:
    post:
      tags:
        - coincheckup_score_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: coincheckup_score_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
  '/coincheckup_score_models/{id}/exists':
    get:
      tags:
        - coincheckup_score_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'coincheckup_score_model.exists__get_coincheckup_score_models_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/coincheckup_score_models/{id}':
    head:
      tags:
        - coincheckup_score_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'coincheckup_score_model.exists__head_coincheckup_score_models_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - coincheckup_score_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: coincheckup_score_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
    delete:
      tags:
        - coincheckup_score_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: coincheckup_score_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - coincheckup_score_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_score_model.prototype.updateAttributes__put_coincheckup_score_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_score_model'
        - name: id
          in: path
          description: coincheckup_score_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_score_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_score_model.prototype.updateAttributes__patch_coincheckup_score_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_score_model'
        - name: id
          in: path
          description: coincheckup_score_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
  '/coincheckup_score_models/{id}/replace':
    post:
      tags:
        - coincheckup_score_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: coincheckup_score_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
  /coincheckup_score_models/findOne:
    get:
      tags:
        - coincheckup_score_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: coincheckup_score_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_score_model'
      deprecated: false
  /coincheckup_score_models/update:
    post:
      tags:
        - coincheckup_score_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: coincheckup_score_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_score_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /coincheckup_score_models/count:
    get:
      tags:
        - coincheckup_score_model
      summary: Count instances of the model matched by where from the data source.
      operationId: coincheckup_score_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /coincheckup_prediction_models:
    post:
      tags:
        - coincheckup_prediction_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: coincheckup_prediction_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    put:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_prediction_model.upsert__put_coincheckup_prediction_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_prediction_model.upsert__patch_coincheckup_prediction_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    get:
      tags:
        - coincheckup_prediction_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: coincheckup_prediction_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
  /coincheckup_prediction_models/replaceOrCreate:
    post:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_prediction_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
  /coincheckup_prediction_models/upsertWithWhere:
    post:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: coincheckup_prediction_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
  '/coincheckup_prediction_models/{id}/exists':
    get:
      tags:
        - coincheckup_prediction_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coincheckup_prediction_model.exists__get_coincheckup_prediction_models_{id}_exists
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/coincheckup_prediction_models/{id}':
    head:
      tags:
        - coincheckup_prediction_model
      summary: Check whether a model instance exists in the data source.
      operationId: >-
        coincheckup_prediction_model.exists__head_coincheckup_prediction_models_{id}
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - coincheckup_prediction_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: coincheckup_prediction_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    delete:
      tags:
        - coincheckup_prediction_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: coincheckup_prediction_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_prediction_model.prototype.updateAttributes__put_coincheckup_prediction_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_prediction_model'
        - name: id
          in: path
          description: coincheckup_prediction_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_prediction_model.prototype.updateAttributes__patch_coincheckup_prediction_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_prediction_model'
        - name: id
          in: path
          description: coincheckup_prediction_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
  '/coincheckup_prediction_models/{id}/replace':
    post:
      tags:
        - coincheckup_prediction_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: coincheckup_prediction_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
  /coincheckup_prediction_models/findOne:
    get:
      tags:
        - coincheckup_prediction_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: coincheckup_prediction_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
  /coincheckup_prediction_models/update:
    post:
      tags:
        - coincheckup_prediction_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: coincheckup_prediction_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_prediction_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /coincheckup_prediction_models/count:
    get:
      tags:
        - coincheckup_prediction_model
      summary: Count instances of the model matched by where from the data source.
      operationId: coincheckup_prediction_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/coincheckup_coin_models/{id}/investments':
    get:
      tags:
        - coincheckup_coin_model
      summary: Fetches hasOne relation investments.
      operationId: coincheckup_coin_model.prototype.__get__investments
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    post:
      tags:
        - coincheckup_coin_model
      summary: Creates a new instance in investments of this model.
      operationId: coincheckup_coin_model.prototype.__create__investments
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    put:
      tags:
        - coincheckup_coin_model
      summary: Update investments of this model.
      operationId: coincheckup_coin_model.prototype.__update__investments
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_investment_model'
      deprecated: false
    delete:
      tags:
        - coincheckup_coin_model
      summary: Deletes investments of this model.
      operationId: coincheckup_coin_model.prototype.__destroy__investments
      parameters:
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/coincheckup_coin_models/{id}/predictions':
    get:
      tags:
        - coincheckup_coin_model
      summary: Fetches hasOne relation predictions.
      operationId: coincheckup_coin_model.prototype.__get__predictions
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    post:
      tags:
        - coincheckup_coin_model
      summary: Creates a new instance in predictions of this model.
      operationId: coincheckup_coin_model.prototype.__create__predictions
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    put:
      tags:
        - coincheckup_coin_model
      summary: Update predictions of this model.
      operationId: coincheckup_coin_model.prototype.__update__predictions
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_prediction_model'
      deprecated: false
    delete:
      tags:
        - coincheckup_coin_model
      summary: Deletes predictions of this model.
      operationId: coincheckup_coin_model.prototype.__destroy__predictions
      parameters:
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /coincheckup_coin_models:
    post:
      tags:
        - coincheckup_coin_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: coincheckup_coin_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
    put:
      tags:
        - coincheckup_coin_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_coin_model.upsert__put_coincheckup_coin_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_coin_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_coin_model.upsert__patch_coincheckup_coin_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
    get:
      tags:
        - coincheckup_coin_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: coincheckup_coin_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
  /coincheckup_coin_models/replaceOrCreate:
    post:
      tags:
        - coincheckup_coin_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: coincheckup_coin_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
  /coincheckup_coin_models/upsertWithWhere:
    post:
      tags:
        - coincheckup_coin_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: coincheckup_coin_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
  '/coincheckup_coin_models/{id}/exists':
    get:
      tags:
        - coincheckup_coin_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'coincheckup_coin_model.exists__get_coincheckup_coin_models_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/coincheckup_coin_models/{id}':
    head:
      tags:
        - coincheckup_coin_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'coincheckup_coin_model.exists__head_coincheckup_coin_models_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - coincheckup_coin_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: coincheckup_coin_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
    delete:
      tags:
        - coincheckup_coin_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: coincheckup_coin_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - coincheckup_coin_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_coin_model.prototype.updateAttributes__put_coincheckup_coin_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_coin_model'
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
    patch:
      tags:
        - coincheckup_coin_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        coincheckup_coin_model.prototype.updateAttributes__patch_coincheckup_coin_models_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_coin_model'
        - name: id
          in: path
          description: coincheckup_coin_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
  '/coincheckup_coin_models/{id}/replace':
    post:
      tags:
        - coincheckup_coin_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: coincheckup_coin_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
  /coincheckup_coin_models/findOne:
    get:
      tags:
        - coincheckup_coin_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: coincheckup_coin_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/coincheckup_coin_model'
      deprecated: false
  /coincheckup_coin_models/update:
    post:
      tags:
        - coincheckup_coin_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: coincheckup_coin_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/coincheckup_coin_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /coincheckup_coin_models/count:
    get:
      tags:
        - coincheckup_coin_model
      summary: Count instances of the model matched by where from the data source.
      operationId: coincheckup_coin_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/user_models/{id}/accessTokens/{fk}':
    get:
      tags:
        - user_model
      summary: Find a related item by id for accessTokens.
      operationId: user_model.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - user_model
      summary: Delete a related item by id for accessTokens.
      operationId: user_model.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user_model
      summary: Update a related item by id for accessTokens.
      operationId: user_model.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/user_models/{id}/accessTokens':
    get:
      tags:
        - user_model
      summary: Queries accessTokens of user_model.
      operationId: user_model.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - user_model
      summary: Creates a new instance in accessTokens of this model.
      operationId: user_model.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - user_model
      summary: Deletes all accessTokens of this model.
      operationId: user_model.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/user_models/{id}/accessTokens/count':
    get:
      tags:
        - user_model
      summary: Counts accessTokens of user_model.
      operationId: user_model.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /user_models:
    post:
      tags:
        - user_model
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user_model.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
    put:
      tags:
        - user_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: user_model.upsert__put_user_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
    patch:
      tags:
        - user_model
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: user_model.upsert__patch_user_models
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
    get:
      tags:
        - user_model
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user_model.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user_model'
      deprecated: false
  /user_models/replaceOrCreate:
    post:
      tags:
        - user_model
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: user_model.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
  /user_models/upsertWithWhere:
    post:
      tags:
        - user_model
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: user_model.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
  '/user_models/{id}/exists':
    get:
      tags:
        - user_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'user_model.exists__get_user_models_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/user_models/{id}':
    head:
      tags:
        - user_model
      summary: Check whether a model instance exists in the data source.
      operationId: 'user_model.exists__head_user_models_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user_model
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user_model.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
    delete:
      tags:
        - user_model
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user_model.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - user_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'user_model.prototype.updateAttributes__put_user_models_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user_model'
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
    patch:
      tags:
        - user_model
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'user_model.prototype.updateAttributes__patch_user_models_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user_model'
        - name: id
          in: path
          description: user_model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
  '/user_models/{id}/replace':
    post:
      tags:
        - user_model
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: user_model.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
  /user_models/findOne:
    get:
      tags:
        - user_model
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user_model.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_model'
      deprecated: false
  /user_models/update:
    post:
      tags:
        - user_model
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: user_model.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user_model'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /user_models/count:
    get:
      tags:
        - user_model
      summary: Count instances of the model matched by where from the data source.
      operationId: user_model.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /user_models/login:
    post:
      tags:
        - user_model
      summary: Login a user with username/email and password.
      operationId: user_model.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /user_models/logout:
    post:
      tags:
        - user_model
      summary: Logout a user with access token.
      operationId: user_model.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /user_models/confirm:
    get:
      tags:
        - user_model
      summary: Confirm a user registration with email verification token.
      operationId: user_model.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /user_models/reset:
    post:
      tags:
        - user_model
      summary: Reset password for a user with email.
      operationId: user_model.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
definitions:
  icowatchlist_live_model:
    properties:
      channels:
        type: array
        items:
          type: string
      country:
        type: string
      endsOn:
        type: string
      founders:
        type: array
        items:
          type: string
      homePage:
        type: string
      id:
        type: string
      logo:
        type: string
      market:
        type: string
      name:
        type: string
      platform:
        type: string
      progress:
        type: string
      startsOn:
        type: string
      whitePaper:
        type: string
    required:
      - id
    additionalProperties: false
  x-any:
    properties: {}
  icowatchlist_upcoming_model:
    properties:
      channels:
        type: array
        items:
          type: string
      crowdsale:
        type: string
      endsOn:
        type: string
      founders:
        type: array
        items:
          type: string
      homePage:
        type: string
      id:
        type: string
      logo:
        type: string
      market:
        type: string
      name:
        type: string
      platform:
        type: string
      startsOn:
        type: string
      whitePaper:
        type: string
    required:
      - id
    additionalProperties: false
  icowatchlist_finished_model:
    properties:
      channels:
        type: array
        items:
          type: string
      country:
        type: string
      endsOn:
        type: string
      founders:
        type: array
        items:
          type: string
      homePage:
        type: string
      id:
        type: string
      logo:
        type: string
      market:
        type: string
      name:
        type: string
      platform:
        type: string
      startsOn:
        type: string
      whitePaper:
        type: string
    required:
      - id
    additionalProperties: false
  coinmarketcap_markets_model:
    properties:
      exchanges:
        type: array
        items:
          type: object
      id:
        type: string
      name:
        type: string
      rank:
        type: string
      symbol:
        type: string
      coinId:
        type: string
    additionalProperties: false
  coinmarketcap_coin_model:
    properties:
      id:
        type: string
      availableSupply:
        type: array
        items:
          type: string
      lastUpdated:
        type: array
        items:
          type: string
      marketCapUSD:
        type: array
        items:
          type: string
      maxSupply:
        type: array
        items:
          type: string
      name:
        type: string
      percentChange1h:
        type: string
      percentChange24h:
        type: string
      percentChange7d:
        type: string
      priceBTC:
        type: array
        items:
          type: string
      priceUSD:
        type: array
        items:
          type: string
      rank:
        type: string
      symbol:
        type: string
      totalSupply:
        type: array
        items:
          type: string
      volume24h:
        type: array
        items:
          type: string
    additionalProperties: false
  masternodespro_statistics_model:
    properties:
      id:
        type: string
      name:
        type: string
      roi:
        type: string
      roi30days:
        type: string
      price:
        type: string
      change:
        type: string
      noOfMasternodes:
        type: string
      noOfRequiredCoins:
        type: string
      masternodeWorth:
        type: string
      monthlyReturn:
        type: string
      yearlyReturn:
        type: string
      info:
        type: string
      link:
        type: string
    additionalProperties: false
  coincheckup_investment_model:
    properties:
      averageMarketCap1m:
        type: string
      averageMothlyRoi1y:
        type: string
      averageVolume1m:
        type: string
      cmgr:
        type: string
      coinAge:
        type: string
      dailyPrice7d:
        type: array
        items:
          type: string
      firstPriceUsd:
        type: string
      growthAllTime:
        type: string
      historical14d:
        type: string
      historical200d:
        type: string
      historical30d:
        type: string
      historical45d:
        type: string
      historical90d:
        type: string
      id:
        type: string
      lastUpdated:
        type: string
      name:
        type: string
      rank:
        type: string
      symbol:
        type: string
      volatility1w:
        type: string
      volatility30d:
        type: string
      winningMonths12m:
        type: string
      coinId:
        type: string
    required:
      - id
    additionalProperties: false
  coincheckup_score_model:
    properties:
      advisorsScore:
        type: string
      businessScore:
        type: string
      coinScore:
        type: string
      communicationScore:
        type: string
      communityScore:
        type: string
      githubScore:
        type: string
      id:
        type: string
      lastUpdated:
        type: string
      name:
        type: string
      productScore:
        type: string
      rank:
        type: string
      socialMediaScore:
        type: string
      symbol:
        type: string
      teamScore:
        type: string
      totalScore:
        type: string
      coinId:
        type: string
    required:
      - id
    additionalProperties: false
  coincheckup_prediction_model:
    properties:
      growthBtc:
        type: object
      growthOthers:
        type: object
      id:
        type: string
      lastUpdated:
        type: string
      name:
        type: string
      rank:
        type: string
      symbol:
        type: string
      worldMoney:
        type: object
      coinId:
        type: string
    required:
      - id
    additionalProperties: false
  coincheckup_coin_model:
    properties:
      availableSupply:
        type: array
        items:
          type: string
      id:
        type: string
      lastUpdated:
        type: array
        items:
          type: string
      marketCapUSD:
        type: array
        items:
          type: string
      maxSupply:
        type: array
        items:
          type: string
      name:
        type: string
      percentChange1h:
        type: string
      percentChange24h:
        type: string
      percentChange7d:
        type: string
      priceBTC:
        type: array
        items:
          type: string
      priceUSD:
        type: array
        items:
          type: string
      proofType:
        type: string
      rank:
        type: string
      symbol:
        type: string
      totalSupply:
        type: array
        items:
          type: string
      volume24h:
        type: array
        items:
          type: string
    required:
      - id
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  user_model:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      id:
        type: string
    required:
      - email
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: cryptoment-loopback
  version: 1.0.0
  title: cryptoment-loopback
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - {}
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'https://cryptoment-api.mybluemix.net'
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          title: invoke
          timeout: 60
          cache-response: protocol
          cache-ttl: 900
          version: 1.0.0
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: $(invoke-tls-profile)
  properties:
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
  gateway: datapower-gateway
